<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)/TypeScriptLanguageServiceTranspiler/bin/Debug/TypeScriptLanguageServiceTranspiler.dll" #>

<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="TypeScriptLanguageServiceTranspiler" #>
<# 
        Transpiler transpiler = new Transpiler();
        transpiler.addRequiredScriptsToHost();
        transpiler.initTypescriptLanguageService();
        List<KeyValuePair<string,List<KeyValuePair<string,string>>>> methods = transpiler.getServiceMethods();
#>


/*Auto generated file. Do not edit this file*/
/*Auto generated file. Do not edit this file*/
/*Auto generated file. Do not edit this file*/

﻿using System;
using System.IO;
using V8.Net;
using System.Diagnostics;

namespace TypeScriptLanguageService { 

   public interface ITypeScriptLanguageServices{
<#  
    foreach ( var method in methods) {
        var signature = "";
        var parameterLength = method.Value.Count;
        int lastItem = method.Value.Count -1;
        var returnParameterType = method.Value[lastItem].Key;
        var methodName = method.Key;
        returnParameterType = returnParameterType.Replace("number","int").Replace("boolean","bool").Replace("?","");
        method.Value.RemoveAt(lastItem);

        foreach ( var parameter in method.Value) 
        {   
            signature = signature + " " + parameter.Key + " " + parameter.Value + ",";
        }
        signature = signature.TrimEnd(',');
        var capitalMethodeName = FirstCharToUpper(methodName);

#>

        <#= returnParameterType #>  <#= capitalMethodeName #> ( <#= signature  #>);
<#
    }
#>
    }
} 

/*Auto generated file. Do not edit this file*/
/*Auto generated file. Do not edit this file*/
/*Auto generated file. Do not edit this file*/

<#+
public string FirstCharToUpper(string input)
{
    if (String.IsNullOrEmpty(input)){
        throw new ArgumentException("ARGH!");
    }
    return input.First().ToString().ToUpper() + input.Substring(1);
}
#>